#!/usr/bin/env python3

import rospy
import getch
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from math import pow, atan2, sqrt

class Turtlebot:
    def __init__(self):
        # Creates a node with name 'turtlebot_autopositioning'
        rospy.init_node('turtlebot_autopositioning', anonymous=True)
        # make sure it is a unique node (using anonymous=True).
        self.velocity_publisher =rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
        # Publishes to the topic '/turtle1/cmd_vel'.
        self.pose_subscriber = rospy.Subscriber('/turtle1/pose',Pose,self.update_pose)
        # A subscriber to the topic '/turtle1/pose'. self.update_pose is called when a message of type Pose is received.
        self.pose=Pose()
        self.rate=rospy.Rate(10)
    def update_pose(self, data):
        """Callback function which is called when a new message of type Pose is received by the subscriber."""
        self.pose = data
        self.pose.x = round(self.pose.x, 4)
        self.pose.y = round(self.pose.y, 4)
    def _distance(self, goal_pose):
        return sqrt(pow((goal_pose.x - self.pose.x), 2) +pow((goal_pose.y - self.pose.y), 2))
    def linear_vel(self, goal_pose, constant=1.5):
        return constant * self._distance(goal_pose)
    def steering_angle(self, goal_pose):
        return atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x)
    def angular_vel(self, goal_pose, constant=6):
        return constant * (self.steering_angle(goal_pose) - self.pose.theta)
    def move2goal(self):
        """Moves the turtle to the goal."""
        goal_pose = Pose()
        goal_pose.x = float(input("Set your x goal: "))
        goal_pose.y = float(input("Set your y goal: "))
        # Get the input from the user.
        distance_tolerance = float(input("Set your tolerance: "))
         # Please, insert a number slightly greater than 0 (e.g. 0.01).
        velocity_msg = Twist()
        while self._distance(goal_pose)>=distance_tolerance:
            # Porportional controller.
            # Linear velocity in the x-axis.
            velocity_msg.linear.x=self.linear_vel(goal_pose)
            velocity_msg.linear.y=0
            velocity_msg.linear.z=0
            # Angular velocity in the z-axis.
            velocity_msg.angular.x=0
            velocity_msg.angular.y=0
            velocity_msg.angular.z=self.angular_vel(goal_pose)
            # Publishing our vel_msg
            self.velocity_publisher.publish(velocity_msg)
            # Publish at the desired rate
            #self.rate.sleep()
            #Stopping our robot after the movement is over.
        velocity_msg.linear.x=0
        velocity_msg.angular.z=0
        self.velocity_publisher.publish(velocity_msg)
        #press control + C to stop the node.
        rospy.spin()
    
    
if __name__=="__main__":
    try:
        x=Turtlebot()
        x.move2goal()
    except rospy.ROSInterruptException:
        pass